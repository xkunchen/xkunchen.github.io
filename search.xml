<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>oracle向mysql改造</title>
    <url>/2020/01/10/oracle-xiang-mysql-gai-zao/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        由于工作需要，把oracle数据库改造成mysql数据库，而oracle和mysql在一定程度上有很大的区别，我们的工作是在已有项目改bug，所以特地总结一下这几天项目需要的改动。</p>
<a id="more"></a>

<h2 id="函数式报错"><a href="#函数式报错" class="headerlink" title="函数式报错"></a>函数式报错</h2><h3 id="start-with-connect-by-prior函数错误"><a href="#start-with-connect-by-prior函数错误" class="headerlink" title="start with connect by prior函数错误"></a>start with connect by prior函数错误</h3><h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>​        这个是oracle特有的一个函数，是根据条件递归查询”树”。注意递归查询，常用用法：start with connect by prior parentId=id或start with connect by prior id=parentId，第一种是：查询结果自己所有的后代节点（包括自己）；第二种用法是查询结果自己所有的父类节点（包括自己）。</p>
<h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><p>​        Mysql不支持通过start with connect by进行递归查询，所以创建函数进行查找。</p>
<p>​        首先是第一种：查询结果自己所有的后代节点（包括自己），首先得了解find_in_set这个函数作用，举个例子：find_in_set（parent_id,”1,2,3”）的意思是parent_id在1,2,3内。创建函数如下：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> getTaskObject    <span class="token comment" spellcheck="true">--getTaskObject 函数名称</span>
<span class="token punctuation">(</span>rootId <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">--输入值类型        </span>
<span class="token keyword">returns</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">--返回值类型</span>
<span class="token keyword">as</span>
    <span class="token keyword">begin</span>
        <span class="token keyword">DECLARE</span> sTemp <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--定义变量</span>
        <span class="token keyword">DECLARE</span> sTempChd <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--定义变量</span>

        <span class="token keyword">SET</span> sTemp <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">-- SET sTempChd = CAST(auth_id AS CHAR);</span>
        <span class="token keyword">SET</span> sTempChd <span class="token operator">=</span> auth_id<span class="token punctuation">;</span>

        <span class="token keyword">WHILE</span> sTempChd <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DO</span> <span class="token comment" spellcheck="true">--如果不空一直循环</span>
            <span class="token keyword">IF</span> sTemp <span class="token operator">=</span> <span class="token string">''</span> <span class="token keyword">THEN</span>
                <span class="token keyword">SET</span> sTemp <span class="token operator">=</span> sTempChd<span class="token punctuation">;</span>
            <span class="token keyword">ELSE</span>
                <span class="token keyword">SET</span> sTemp<span class="token operator">=</span> CONCAT<span class="token punctuation">(</span>sTemp<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span>sTempChd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
            <span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">INTO</span> sTempChd <span class="token keyword">FROM</span> SBP_AUTH_ROLE <span class="token keyword">WHERE</span> FIND_IN_SET<span class="token punctuation">(</span>parent_id<span class="token punctuation">,</span>sTempChd<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--把所有的id拼接接起来</span>
        <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--结束循环</span>
        <span class="token keyword">RETURN</span> sTemp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--返回结果</span>
<span class="token keyword">end</span></code></pre>
<p>​        调用可以向平时调用内置函数一样调用，这个函数的返回值是所有符合条件id拼接起来字符串，所以我们调用也得加find_in_set(id,getTaskObject(值))</p>
<p>​         第二种：查询结果自己所有的父类节点，返回值也是所有符合条件id拼接起来字符串，所以我们调用也得加find_in_set(id,getTaskObject(子节点id))</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> getTaskObject    <span class="token comment" spellcheck="true">--getTaskObject 函数名称</span>
<span class="token punctuation">(</span>rootId <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">--输入值类型        </span>
<span class="token keyword">returns</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">--返回值类型</span>
<span class="token keyword">as</span>
    <span class="token keyword">BEGIN</span> 
        <span class="token keyword">DECLARE</span> sTemp <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--定义变量</span>
        <span class="token keyword">DECLARE</span> sTempChd <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--定义变量</span>
        <span class="token keyword">DECLARE</span> allData <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--定义变量</span>
        <span class="token keyword">SET</span> allData<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>                
        <span class="token keyword">SET</span> sTempChd <span class="token operator">=</span>cast<span class="token punctuation">(</span>rootId <span class="token keyword">as</span> CHAR<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">SET</span> sTemp<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>
        <span class="token keyword">WHILE</span> sTempChd <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DO</span> <span class="token comment" spellcheck="true">--如果不空一直循环</span>
                <span class="token keyword">SET</span> sTemp<span class="token operator">=</span>sTempChd<span class="token punctuation">;</span>
                <span class="token keyword">SET</span> allData<span class="token operator">=</span>CONCAT<span class="token punctuation">(</span>allData<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span>sTempChd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">SELECT</span> PARENT_ID <span class="token keyword">INTO</span> sTempChd <span class="token keyword">FROM</span> usbp_task_object <span class="token keyword">where</span> OBJECT_ID<span class="token operator">=</span>sTemp<span class="token punctuation">;</span>
        <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--结束循环</span>
        <span class="token keyword">RETURN</span> allData<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">--返回结果</span>
    <span class="token keyword">END</span></code></pre>
<h4 id="延伸："><a href="#延伸：" class="headerlink" title="延伸："></a>延伸：</h4><h5 id="传入的table为动态table表怎么办？"><a href="#传入的table为动态table表怎么办？" class="headerlink" title="传入的table为动态table表怎么办？"></a>传入的table为动态table表怎么办？</h5><p>​        本以为这样写就可以全部用上，但这个有个明显的不足就是table只能写死，一开始的想法是把table传进去，但报错了，我是这样写的：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> parent_id <span class="token keyword">into</span> sTempChd <span class="token keyword">from</span> tableName<span class="token punctuation">(</span>ps：这是个变量<span class="token punctuation">)</span> <span class="token keyword">where</span> object_id<span class="token operator">=</span>sTemp<span class="token punctuation">;</span></code></pre>
<p>​        会报tableName这个表不存在的错误，因为sql不会自动识别tableName这个变量，它会认为有这个tableName的表 。</p>
<p>​         网上查找了资料说可以用动态sql，但函数不支持动态sql，所以解决办法就是写一个存储过程，以下讲解的是第二种查询结果自己所有的父类节点，如下:</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> SELECT_TREE<span class="token punctuation">(</span><span class="token operator">IN</span> keyColumn <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">CHARSET</span> utf8<span class="token punctuation">,</span><span class="token operator">IN</span> tableName <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">CHARSET</span> utf8<span class="token punctuation">,</span><span class="token operator">IN</span> parentColumn <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">CHARSET</span> utf8<span class="token punctuation">,</span>
<span class="token operator">IN</span> keyValue <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">CHARSET</span> utf8<span class="token punctuation">,</span><span class="token keyword">OUT</span> returndata <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span> <span class="token keyword">CHARSET</span> utf8<span class="token punctuation">)</span><span class="token comment" spellcheck="true">--输入输出参数，in为输入，out为输出</span>
    <span class="token keyword">BEGIN</span>
            <span class="token keyword">declare</span> sTemp <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--定义变量</span>
            <span class="token keyword">SET</span> sTemp <span class="token operator">=</span> keyValue<span class="token punctuation">;</span>
            <span class="token keyword">SET</span> returndata<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>

            <span class="token keyword">WHILE</span> sTemp <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DO</span><span class="token comment" spellcheck="true">--如果不空一直循环</span>
                    <span class="token comment" spellcheck="true">-- 创建sql</span>
                    <span class="token keyword">SET</span> <span class="token variable">@selectSql</span> <span class="token operator">=</span> CONCAT<span class="token punctuation">(</span><span class="token string">'select '</span><span class="token punctuation">,</span>parentColumn<span class="token punctuation">,</span><span class="token string">' INTO @recordcount  from '</span><span class="token punctuation">,</span>tableName<span class="token punctuation">,</span><span class="token string">' where '</span><span class="token punctuation">,</span>keyColumn<span class="token punctuation">,</span><span class="token string">"='"</span><span class="token punctuation">,</span>sTemp<span class="token punctuation">,</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">-- 执行动态生成的sql语句</span>
                    PREPARE <span class="token keyword">temp</span> <span class="token keyword">FROM</span> <span class="token variable">@selectSql</span><span class="token punctuation">;</span>
                    <span class="token keyword">EXECUTE</span> <span class="token keyword">temp</span><span class="token punctuation">;</span>
                    <span class="token keyword">SET</span> sTemp <span class="token operator">=</span> <span class="token variable">@recordcount</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--其实对比上面仔细看可以看出只是这一步不同</span>
                    <span class="token keyword">IF</span> sTemp <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span>
                    <span class="token keyword">SET</span> returndata<span class="token operator">=</span>CONCAT<span class="token punctuation">(</span>returndata<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span>sTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
            <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结束循环</span>
    <span class="token keyword">END</span></code></pre>
<p>​        可以对比上面的自定义函数，一个注意地方是@recordcount 代替sTempChd 变量，声明这是个变量，其他是语法问题，逻辑和自定义函数相同。</p>
<p>​         然后就是调用测试，我是在Navicat测试的，我的版本可以直接传参（听说低版本不可以直接测试）。注意的是out输出参数要传递变量，如:(keycolum,tableName,pid,in,@returnData)。</p>
<p>​         <img src="/2020/01/10/oracle-xiang-mysql-gai-zao/%E6%B5%8B%E8%AF%95%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.png" alt="测试存储过程"></p>
<p>​         以上是在Navicat调用的，在项目中，我们需要写sql调用，用的是mybatis框架，调用如下，最重要是要加上statementType=”CALLABLE”，如果传入是map，returnData这个名字可以随便取，传入是pojo，这个值必须固定，在pojo里面应该有个同名变量。返回值去传入的参数里拿，这个我传入的是map，所以直接去传入的map拿了，至于传入pojo要给个变量returnData，会自动注入。</p>
<p>​         </p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shd.biz.Tree.service.impl.TreeServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 注意 statementType="CALLABLE" --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>treeParent<span class="token punctuation">"</span></span> <span class="token attr-name">statementType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CALLABLE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        {call SELECT_TREE(
        #{keyColumn,mode=IN},#{tableName,mode=IN},#{parentColumn,mode=IN},#{keyValue,mode=IN}
        ,#{returnData,mode=OUT,jdbcType=VARCHAR})}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre>
<p>​      </p>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> parameters<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        parameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"keyValue"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        parameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tableName"</span><span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">;</span>
        parameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"keyColumn"</span><span class="token punctuation">,</span> keyColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        parameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"parentColumn"</span><span class="token punctuation">,</span> parentColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queryForDataSet</span><span class="token punctuation">(</span>SQL_PRIFIX <span class="token operator">+</span> <span class="token string">"treeParent"</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//结果是从传入参数里面拿，不是从返回结果拿</span>
        String returnData <span class="token operator">=</span> parameters<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"returnData"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h5 id="调用报方法read-Only错误"><a href="#调用报方法read-Only错误" class="headerlink" title="调用报方法read-Only错误"></a>调用报方法read-Only错误</h5><p>​         最后还有个报错是事务报错，是因为我项目get开头的方法设置了readOnly=”true”，而调用存储过程如果还设置readOnly属性就会报错，要加上@Transactional(readOnly = false)或改变service方法名。</p>
<h3 id="Sysdate报错"><a href="#Sysdate报错" class="headerlink" title="Sysdate报错"></a>Sysdate报错</h3><p>​        解决Sysdate替换为sysdate()</p>
<h3 id="to-char报错"><a href="#to-char报错" class="headerlink" title="to_char报错"></a>to_char报错</h3><p>​        网上查找的资料：</p>
<p>​       date_format(date,’%Y-%m-%d’) ————–&gt;oracle中的to_char();</p>
<p>​        str_to_date(date,’%Y-%m-%d’) ————–&gt;oracle中的to_date();</p>
<p>​       </p>
<h3 id="日期的计算"><a href="#日期的计算" class="headerlink" title="日期的计算"></a>日期的计算</h3><p>​        oracle 可以直接用sysdate加减乘除，而mysql不可以，如</p>
<p>近一个月：</p>
<p>​        Oracle——–&gt;sysdate-29</p>
<p>​        Mysql———&gt;</p>
<pre class=" language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"REPORT_TIME == '本周'"</span><span class="token operator">></span>
                <span class="token operator">and</span> YEARWEEK<span class="token punctuation">(</span>date_format<span class="token punctuation">(</span>report_time<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> YEARWEEK<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"REPORT_TIME == '本月'"</span><span class="token operator">></span>
                <span class="token operator">and</span> report_time <span class="token operator">>=</span>DATE_ADD<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>interval <span class="token operator">-</span>day<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> day<span class="token punctuation">)</span> <span class="token operator">and</span> report_time <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span> last_day<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"REPORT_TIME == '近1个月'"</span><span class="token operator">></span>
                <span class="token operator">and</span> report_time <span class="token operator">BETWEEN</span> date_sub<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>interval <span class="token number">1</span> month<span class="token punctuation">)</span> <span class="token operator">AND</span> SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"REPORT_TIME == '近3个月'"</span><span class="token operator">></span>
                <span class="token operator">and</span> report_time <span class="token operator">BETWEEN</span> date_sub<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>interval <span class="token number">3</span> month<span class="token punctuation">)</span> <span class="token operator">AND</span> SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"REPORT_TIME == '近1年'"</span><span class="token operator">></span>
                <span class="token operator">and</span> report_time <span class="token operator">BETWEEN</span> date_sub<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>interval <span class="token number">12</span> month<span class="token punctuation">)</span> <span class="token operator">AND</span> SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span></code></pre>
<h3 id="Rownum报错"><a href="#Rownum报错" class="headerlink" title="Rownum报错"></a>Rownum报错</h3><p>​        在mysql中没有Rownum，所以要特殊的实现方法，实现和效果如下，但我项目是用来分页，所以直接就用limit。</p>
<p>​         </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token variable">@rownum</span>:<span class="token operator">=</span><span class="token variable">@rownum</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">AS</span> rownum<span class="token punctuation">,</span> <span class="token keyword">table</span> <span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token variable">@rownum</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> r<span class="token punctuation">,</span> <span class="token keyword">table</span> <span class="token punctuation">;</span></code></pre>
<h3 id="运算符报错"><a href="#运算符报错" class="headerlink" title="||运算符报错"></a>||运算符报错</h3><p>​        Mysql中||表示或的意识，而Oracle中||运算符可以将两个或两个以上的字符串连接在一起，在mysql中用concat代替。</p>
<h2 id="其他报错"><a href="#其他报错" class="headerlink" title="其他报错"></a>其他报错</h2><h3 id="表别名报错"><a href="#表别名报错" class="headerlink" title="表别名报错"></a>表别名报错</h3><p> 别名报错，首先mysql不可以像Oracle一样直接多重查找不加别名，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token keyword">key</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">key</span> <span class="token keyword">from</span> <span class="token keyword">database</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

改为<span class="token keyword">Select</span> t<span class="token punctuation">.</span><span class="token keyword">key</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">key</span> <span class="token keyword">from</span> <span class="token keyword">database</span><span class="token punctuation">)</span> t<span class="token punctuation">;</span></code></pre>
<p>但在删除时又不可以加别名，如 ：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">Delete</span> <span class="token keyword">from</span> <span class="token keyword">database</span> r <span class="token keyword">where</span> r<span class="token punctuation">.</span>id<span class="token operator">=</span>?会报错，得改为:

<span class="token keyword">Delete</span> <span class="token keyword">from</span> <span class="token keyword">database</span> <span class="token keyword">where</span> id<span class="token operator">=</span>?</code></pre>
<h3 id="Mysql没有序列问题"><a href="#Mysql没有序列问题" class="headerlink" title="Mysql没有序列问题"></a>Mysql没有序列问题</h3><h3 id="存储类型bigInteger装换toBigDecimal"><a href="#存储类型bigInteger装换toBigDecimal" class="headerlink" title="存储类型bigInteger装换toBigDecimal"></a>存储类型bigInteger装换toBigDecimal</h3><p>​             原来oracle存储数据类型是integer，现在存储类型为decimal，启动时报错，bigInteger cannot to cast toBigDecimal，所以，就得装换一下。</p>
<p><a href="https://www.cnblogs.com/diandianquanquan/p/10852620.html" target="_blank" rel="noopener">这是详情</a></p>
<h3 id="union报错"><a href="#union报错" class="headerlink" title="union报错"></a>union报错</h3><p>​        Oracle的union和mysql的union的一个细节错误导致，oracle可以用括号括起来，而mysql不可以</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>oracle</category>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>oracle</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
