<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cxkの博客</title>
  
  <subtitle>不负当下，不念过往，不惧明天</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xkunchen.github.io/"/>
  <updated>2020-03-04T03:28:19.560Z</updated>
  <id>https://xkunchen.github.io/</id>
  
  <author>
    <name>XuKun Chen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>oracle向mysql改造</title>
    <link href="https://xkunchen.github.io/2020/01/10/Oracle%E5%90%91mysql%E6%94%B9%E9%80%A0/"/>
    <id>https://xkunchen.github.io/2020/01/10/Oracle向mysql改造/</id>
    <published>2020-01-10T03:44:53.000Z</published>
    <updated>2020-03-04T03:28:19.560Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        由于工作需要，把oracle数据库改造成mysql数据库，而oracle和mysql在一定程度上有很大的区别，我们的工作是在已有项目改bug，所以特地总结一下这几天项目需要的改动。</p><a id="more"></a><h2 id="函数式报错"><a href="#函数式报错" class="headerlink" title="函数式报错"></a>函数式报错</h2><h3 id="start-with-connect-by-prior函数错误"><a href="#start-with-connect-by-prior函数错误" class="headerlink" title="start with connect by prior函数错误"></a>start with connect by prior函数错误</h3><h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>​        这个是oracle特有的一个函数，是根据条件递归查询”树”。注意递归查询，常用用法：start with connect by prior parentId=id或start with connect by prior id=parentId，第一种是：查询结果自己所有的后代节点（包括自己）；第二种用法是查询结果自己所有的父类节点（包括自己）。</p><h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><p>​        Mysql不支持通过start with connect by进行递归查询，所以创建函数进行查找。</p><p>​        首先是第一种：查询结果自己所有的后代节点（包括自己），首先得了解find_in_set这个函数作用，举个例子：find_in_set（parent_id,”1,2,3”）的意思是parent_id在1,2,3内。创建函数如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> getTaskObject    <span class="comment">--getTaskObject 函数名称</span></span><br><span class="line">(rootId <span class="built_in">varchar</span>(<span class="number">100</span>)) <span class="comment">--输入值类型</span></span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span>(<span class="number">1024</span>)            <span class="comment">--返回值类型</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line"><span class="keyword">DECLARE</span> sTemp <span class="built_in">VARCHAR</span>(<span class="number">1024</span>);   <span class="comment">--定义变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> sTempChd <span class="built_in">VARCHAR</span>(<span class="number">1024</span>);<span class="comment">--定义变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SET</span> sTemp = <span class="string">''</span>;</span><br><span class="line"><span class="comment">-- SET sTempChd = CAST(auth_id AS CHAR);</span></span><br><span class="line"><span class="keyword">SET</span> sTempChd = auth_id;</span><br><span class="line"></span><br><span class="line">WHILE sTempChd IS NOT NULL <span class="keyword">DO</span> <span class="comment">--如果不空一直循环</span></span><br><span class="line"><span class="keyword">IF</span> sTemp = <span class="string">''</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> sTemp = sTempChd;</span><br><span class="line">ELSE</span><br><span class="line"><span class="keyword">SET</span> sTemp= <span class="keyword">CONCAT</span>(sTemp,<span class="string">','</span>,sTempChd);</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">GROUP_CONCAT</span>(<span class="keyword">id</span>) <span class="keyword">INTO</span> sTempChd <span class="keyword">FROM</span> SBP_AUTH_ROLE <span class="keyword">WHERE</span> FIND_IN_SET(parent_id,sTempChd)&gt;<span class="number">0</span>;<span class="comment">--把所有的id拼接接起来</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;<span class="comment">--结束循环</span></span><br><span class="line">RETURN sTemp; <span class="comment">--返回结果</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></tbody></table></figure><p>​        调用可以向平时调用内置函数一样调用，这个函数的返回值是所有符合条件id拼接起来字符串，所以我们调用也得加find_in_set(id,getTaskObject(值))</p><p>​         第二种：查询结果自己所有的父类节点，返回值也是所有符合条件id拼接起来字符串，所以我们调用也得加find_in_set(id,getTaskObject(子节点id))</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> getTaskObject    <span class="comment">--getTaskObject 函数名称</span></span><br><span class="line">(rootId <span class="built_in">varchar</span>(<span class="number">100</span>)) <span class="comment">--输入值类型</span></span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span>(<span class="number">1024</span>)            <span class="comment">--返回值类型</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">BEGIN</span> </span><br><span class="line"><span class="keyword">DECLARE</span> sTemp <span class="built_in">VARCHAR</span>(<span class="number">100</span>); <span class="comment">--定义变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> sTempChd <span class="built_in">VARCHAR</span>(<span class="number">100</span>);<span class="comment">--定义变量</span></span><br><span class="line"><span class="keyword">DECLARE</span> allData <span class="built_in">VARCHAR</span>(<span class="number">1024</span>);<span class="comment">--定义变量</span></span><br><span class="line"><span class="keyword">SET</span> allData=<span class="string">''</span>;</span><br><span class="line"><span class="keyword">SET</span> sTempChd =<span class="keyword">cast</span>(rootId <span class="keyword">as</span> <span class="built_in">CHAR</span>);</span><br><span class="line"><span class="keyword">SET</span> sTemp=<span class="string">''</span>;</span><br><span class="line">WHILE sTempChd IS NOT NULL <span class="keyword">DO</span> <span class="comment">--如果不空一直循环</span></span><br><span class="line"><span class="keyword">SET</span> sTemp=sTempChd;</span><br><span class="line"><span class="keyword">SET</span> allData=<span class="keyword">CONCAT</span>(allData,<span class="string">','</span>,sTempChd);</span><br><span class="line"><span class="keyword">SELECT</span> PARENT_ID <span class="keyword">INTO</span> sTempChd <span class="keyword">FROM</span> usbp_task_object <span class="keyword">where</span> OBJECT_ID=sTemp;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;  <span class="comment">--结束循环</span></span><br><span class="line">RETURN allData;     <span class="comment">--返回结果</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></tbody></table></figure><h4 id="延伸："><a href="#延伸：" class="headerlink" title="延伸："></a>延伸：</h4><h5 id="传入的table为动态table表怎么办？"><a href="#传入的table为动态table表怎么办？" class="headerlink" title="传入的table为动态table表怎么办？"></a>传入的table为动态table表怎么办？</h5><p>​        本以为这样写就可以全部用上，但这个有个明显的不足就是table只能写死，一开始的想法是把table传进去，但报错了，我是这样写的：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> parent_id <span class="keyword">into</span> sTempChd <span class="keyword">from</span> tableName(ps：这是个变量) <span class="keyword">where</span> object_id=sTemp;</span><br></pre></td></tr></tbody></table></figure><p>​        会报tableName这个表不存在的错误，因为sql不会自动识别tableName这个变量，它会认为有这个tableName的表 。</p><p>​         网上查找了资料说可以用动态sql，但函数不支持动态sql，所以解决办法就是写一个存储过程，以下讲解的是第二种查询结果自己所有的父类节点，如下:</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> SELECT_TREE(<span class="keyword">IN</span> keyColumn <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">CHARSET</span> utf8,<span class="keyword">IN</span> tableName <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">CHARSET</span> utf8,<span class="keyword">IN</span> parentColumn <span class="built_in">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">CHARSET</span> utf8,</span><br><span class="line"><span class="keyword">IN</span> keyValue <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">CHARSET</span> utf8,<span class="keyword">OUT</span> returndata <span class="built_in">VARCHAR</span>(<span class="number">2048</span>) <span class="keyword">CHARSET</span> utf8)<span class="comment">--输入输出参数，in为输入，out为输出</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">declare</span> sTemp <span class="built_in">VARCHAR</span>(<span class="number">100</span>); <span class="comment">--定义变量</span></span><br><span class="line"><span class="keyword">SET</span> sTemp = keyValue;</span><br><span class="line"><span class="keyword">SET</span> returndata=<span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">WHILE sTemp IS NOT NULL <span class="keyword">DO</span><span class="comment">--如果不空一直循环</span></span><br><span class="line"><span class="comment">-- 创建sql</span></span><br><span class="line"><span class="keyword">SET</span> @selectSql = <span class="keyword">CONCAT</span>(<span class="string">'select '</span>,parentColumn,<span class="string">' INTO @recordcount  from '</span>,tableName,<span class="string">' where '</span>,keyColumn,<span class="string">"='"</span>,sTemp,<span class="string">"'"</span>);</span><br><span class="line"><span class="comment">-- 执行动态生成的sql语句</span></span><br><span class="line"><span class="keyword">PREPARE</span> temp <span class="keyword">FROM</span> @selectSql;</span><br><span class="line"><span class="keyword">EXECUTE</span> temp;</span><br><span class="line"><span class="keyword">SET</span> sTemp = @recordcount;<span class="comment">--其实对比上面仔细看可以看出只是这一步不同</span></span><br><span class="line">IF sTemp IS NOT NULL THEN</span><br><span class="line"><span class="keyword">SET</span> returndata=<span class="keyword">CONCAT</span>(returndata,<span class="string">','</span>,sTemp);</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>; <span class="comment">--结束循环</span></span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></tbody></table></figure><p>​        可以对比上面的自定义函数，一个注意地方是@recordcount 代替sTempChd 变量，声明这是个变量，其他是语法问题，逻辑和自定义函数相同。</p><p>​         然后就是调用测试，我是在Navicat测试的，我的版本可以直接传参（听说低版本不可以直接测试）。注意的是out输出参数要传递变量，如:(keycolum,tableName,pid,in,@returnData)。</p><p>​         <img src="/2020/01/10/Oracle向mysql改造/%E6%B5%8B%E8%AF%95%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.png" alt="测试存储过程"></p><p>​         以上是在Navicat调用的，在项目中，我们需要写sql调用，用的是mybatis框架，调用如下，最重要是要加上statementType=”CALLABLE”，如果传入是map，returnData这个名字可以随便取，传入是pojo，这个值必须固定，在pojo里面应该有个同名变量。返回值去传入的参数里拿，这个我传入的是map，所以直接去传入的map拿了，至于传入pojo要给个变量returnData，会自动注入。</p><p>​         </p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.shd.biz.Tree.service.impl.TreeServiceImpl"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 注意 statementType="CALLABLE" --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"treeParent"</span> <span class="attr">statementType</span>=<span class="string">"CALLABLE"</span>&gt;</span></span><br><span class="line">{call SELECT_TREE(</span><br><span class="line">#{keyColumn,mode=IN},#{tableName,mode=IN},#{parentColumn,mode=IN},#{keyValue,mode=IN}</span><br><span class="line">,#{returnData,mode=OUT,jdbcType=VARCHAR})}</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​      </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; parameters=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">parameters.put(<span class="string">"keyValue"</span>, value);</span><br><span class="line">parameters.put(<span class="string">"tableName"</span>, table);</span><br><span class="line">parameters.put(<span class="string">"keyColumn"</span>, keyColumn);</span><br><span class="line">parameters.put(<span class="string">"parentColumn"</span>, parentColumn);</span><br><span class="line"><span class="keyword">this</span>.getDao().queryForDataSet(SQL_PRIFIX + <span class="string">"treeParent"</span>, parameters);</span><br><span class="line"><span class="comment">//结果是从传入参数里面拿，不是从返回结果拿</span></span><br><span class="line">String returnData = parameters.get(<span class="string">"returnData"</span>).toString();</span><br></pre></td></tr></tbody></table></figure><h5 id="调用报方法read-Only错误"><a href="#调用报方法read-Only错误" class="headerlink" title="调用报方法read-Only错误"></a>调用报方法read-Only错误</h5><p>​         最后还有个报错是事务报错，是因为我项目get开头的方法设置了readOnly=”true”，而调用存储过程如果还设置readOnly属性就会报错，要加上@Transactional(readOnly = false)或改变service方法名。</p><h3 id="Sysdate报错"><a href="#Sysdate报错" class="headerlink" title="Sysdate报错"></a>Sysdate报错</h3><p>​        解决Sysdate替换为sysdate()</p><h3 id="to-char报错"><a href="#to-char报错" class="headerlink" title="to_char报错"></a>to_char报错</h3><p>​        网上查找的资料：</p><p>​       date_format(date,’%Y-%m-%d’) ————–&gt;oracle中的to_char();</p><p>​        str_to_date(date,’%Y-%m-%d’) ————–&gt;oracle中的to_date();</p><p>​       </p><h3 id="日期的计算"><a href="#日期的计算" class="headerlink" title="日期的计算"></a>日期的计算</h3><p>​        oracle 可以直接用sysdate加减乘除，而mysql不可以，如</p><p>近一个月：</p><p>​        Oracle——–&gt;sysdate-29</p><p>​        Mysql———&gt;</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;if test="REPORT_TIME == '本周'"&gt;</span><br><span class="line">and YEARWEEK(date_format(report_time,'%Y-%m-%d')) = YEARWEEK(now()) </span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test="REPORT_TIME == '本月'"&gt;</span><br><span class="line">and report_time &gt;=DATE_ADD(curdate(),interval -day(curdate())+1 day) and report_time &amp;lt;= last_day(SYSDATE())</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test="REPORT_TIME == '近1个月'"&gt;</span><br><span class="line">and report_time BETWEEN date_sub(SYSDATE(),interval 1 month) AND SYSDATE()</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test="REPORT_TIME == '近3个月'"&gt;</span><br><span class="line">and report_time BETWEEN date_sub(SYSDATE(),interval 3 month) AND SYSDATE()</span><br><span class="line">&lt;/if&gt;</span><br><span class="line">&lt;if test="REPORT_TIME == '近1年'"&gt;</span><br><span class="line">and report_time BETWEEN date_sub(SYSDATE(),interval 12 month) AND SYSDATE()</span><br><span class="line">&lt;/if&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="Rownum报错"><a href="#Rownum报错" class="headerlink" title="Rownum报错"></a>Rownum报错</h3><p>​        在mysql中没有Rownum，所以要特殊的实现方法，实现和效果如下，但我项目是用来分页，所以直接就用limit。</p><p>​         </p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">rownum</span>:=@<span class="keyword">rownum</span>+<span class="number">1</span> <span class="keyword">AS</span> <span class="keyword">rownum</span>, <span class="keyword">table</span> .*</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> @<span class="keyword">rownum</span>:=<span class="number">0</span>) r, <span class="keyword">table</span> ;</span><br></pre></td></tr></tbody></table></figure><h3 id="运算符报错"><a href="#运算符报错" class="headerlink" title="||运算符报错"></a>||运算符报错</h3><p>​        Mysql中||表示或的意识，而Oracle中||运算符可以将两个或两个以上的字符串连接在一起，在mysql中用concat代替。</p><h2 id="其他报错"><a href="#其他报错" class="headerlink" title="其他报错"></a>其他报错</h2><h3 id="表别名报错"><a href="#表别名报错" class="headerlink" title="表别名报错"></a>表别名报错</h3><p> 别名报错，首先mysql不可以像Oracle一样直接多重查找不加别名，如：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Select</span> <span class="keyword">key</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">key</span> <span class="keyword">from</span> <span class="keyword">database</span>);</span><br><span class="line"></span><br><span class="line">改为<span class="keyword">Select</span> t.key <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">key</span> <span class="keyword">from</span> <span class="keyword">database</span>) t;</span><br></pre></td></tr></tbody></table></figure><p>但在删除时又不可以加别名，如 ：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Delete</span> <span class="keyword">from</span> <span class="keyword">database</span> r <span class="keyword">where</span> r.id=?会报错，得改为:</span><br><span class="line"></span><br><span class="line"><span class="keyword">Delete</span> <span class="keyword">from</span> <span class="keyword">database</span> <span class="keyword">where</span> <span class="keyword">id</span>=?</span><br></pre></td></tr></tbody></table></figure><h3 id="Mysql没有序列问题"><a href="#Mysql没有序列问题" class="headerlink" title="Mysql没有序列问题"></a>Mysql没有序列问题</h3><h3 id="存储类型bigInteger装换toBigDecimal"><a href="#存储类型bigInteger装换toBigDecimal" class="headerlink" title="存储类型bigInteger装换toBigDecimal"></a>存储类型bigInteger装换toBigDecimal</h3><p>​             原来oracle存储数据类型是integer，现在存储类型为decimal，启动时报错，bigInteger cannot to cast toBigDecimal，所以，就得装换一下。</p><p><a href="https://www.cnblogs.com/diandianquanquan/p/10852620.html" target="_blank" rel="noopener">这是详情</a></p><h3 id="union报错"><a href="#union报错" class="headerlink" title="union报错"></a>union报错</h3><p>​        Oracle的union和mysql的union的一个细节错误导致，oracle可以用括号括起来，而mysql不可以</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;​        由于工作需要，把oracle数据库改造成mysql数据库，而oracle和mysql在一定程度上有很大的区别，我们的工作是在已有项目改bug，所以特地总结一下这几天项目需要的改动。&lt;/p&gt;
    
    </summary>
    
      <category term="oracle" scheme="https://xkunchen.github.io/categories/oracle/"/>
    
      <category term="mysql" scheme="https://xkunchen.github.io/categories/oracle/mysql/"/>
    
    
      <category term="oracle" scheme="https://xkunchen.github.io/tags/oracle/"/>
    
      <category term="mysql" scheme="https://xkunchen.github.io/tags/mysql/"/>
    
  </entry>
  
</feed>
