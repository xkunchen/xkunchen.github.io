{"meta":{"title":"cxkの博客","subtitle":"不负当下，不念过往，不惧明天","description":"积跬步而至千里","author":"XuKun Chen","url":"https://xkunchen.github.io","root":"/"},"pages":[{"title":"category","date":"2019-08-27T09:01:36.000Z","updated":"2019-10-12T02:16:03.311Z","comments":true,"path":"category/index.html","permalink":"https://xkunchen.github.io/category/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"about","date":"2019-08-27T09:01:36.000Z","updated":"2019-10-16T01:57:39.586Z","comments":false,"path":"about/index.html","permalink":"https://xkunchen.github.io/about/index.html","excerpt":"","text":"个人简介 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"","date":"2019-08-27T07:55:27.000Z","updated":"2019-10-16T08:44:37.617Z","comments":false,"path":"categories/index.html","permalink":"https://xkunchen.github.io/categories/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"tag","date":"2019-08-27T09:01:36.000Z","updated":"2019-10-12T02:17:01.428Z","comments":true,"path":"tag/index.html","permalink":"https://xkunchen.github.io/tag/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"},{"title":"","date":"2019-08-27T07:42:41.000Z","updated":"2019-10-16T08:44:53.728Z","comments":false,"path":"tags/index.html","permalink":"https://xkunchen.github.io/tags/index.html","excerpt":"","text":"document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });"}],"posts":[{"title":"oracle向mysql改造","slug":"hello-world","date":"2020-01-10T03:44:53.000Z","updated":"2020-03-04T01:47:47.424Z","comments":true,"path":"2020/01/10/hello-world/","link":"","permalink":"https://xkunchen.github.io/2020/01/10/hello-world/","excerpt":"前言​ 由于工作需要，把oracle数据库改造成mysql数据库，而oracle和mysql在一定程度上有很大的区别，我们的工作是在已有项目改bug，所以特地总结一下这几天项目需要的改动。","text":"前言​ 由于工作需要，把oracle数据库改造成mysql数据库，而oracle和mysql在一定程度上有很大的区别，我们的工作是在已有项目改bug，所以特地总结一下这几天项目需要的改动。 1.1 函数式报错1.1.1 start with connect by prior函数错误1.1.1.1 问题描述：​ 这个是oracle特有的一个函数，是根据条件递归查询”树”。注意递归查询，常用用法：start with connect by prior parentId=id或start with connect by prior id=parentId，第一种是：查询结果自己所有的后代节点（包括自己）；第二种用法是查询结果自己所有的父类节点（包括自己）。 1.1.1.2 解决方案：​ Mysql不支持通过start with connect by进行递归查询，所以创建函数进行查找。 ​ 首先是第一种：查询结果自己所有的后代节点（包括自己），首先得了解find_in_set这个函数作用，举例：find_in_set（parent_id,”1,2,3”）的意思是parent_id在1,2,3内。创建函数如下： 123456789101112131415161718create function getTaskObject --getTaskObject 函数名称(rootId varchar(100)) --输入值类型 returns varchar(1024) --返回值类型as BEGIN DECLARE sTemp VARCHAR(100); DECLARE sTempChd VARCHAR(100); DECLARE allData VARCHAR(1024); SET allData=''; SET sTempChd =cast(rootId as CHAR); SET sTemp=''; WHILE sTempChd IS NOT NULL DO --如果不空 SET sTemp=sTempChd; SET allData=CONCAT(allData,',',sTempChd); SELECT PARENT_ID INTO sTempChd FROM usbp_task_object where OBJECT_ID=sTemp; END WHILE; --结束循环 RETURN allData; --返回结果 END ​ 调用可以向平时调用内置函数一样调用，这个函数的返回值是所有符合条件id拼接起来字符串，所以我们调用也得加find_in_set(id,该函数名(根节点id)) 1.1.2 Sysdate报错1.1.3 日期的计算1.1.4 Rownum报错1.1.5 ||运算符报错1.2 其他报错1.2.1 表别名报错1.2.2 Mysql没有序列问题1.2.3 存储类型bigInteger装换toBigDecimal1.2.4 union报错 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[{"name":"oracle","slug":"oracle","permalink":"https://xkunchen.github.io/categories/oracle/"},{"name":"mysql","slug":"oracle/mysql","permalink":"https://xkunchen.github.io/categories/oracle/mysql/"}],"tags":[{"name":"oracle","slug":"oracle","permalink":"https://xkunchen.github.io/tags/oracle/"},{"name":"mysql","slug":"mysql","permalink":"https://xkunchen.github.io/tags/mysql/"}]},{"title":"test title","slug":"test-title","date":"2019-10-12T03:44:53.000Z","updated":"2019-10-12T03:48:47.199Z","comments":true,"path":"2019/10/12/test-title/","link":"","permalink":"https://xkunchen.github.io/2019/10/12/test-title/","excerpt":"文档语言 中文文档 English Contents 目录 Introduction 介绍 Demo 演示 Features 特点 Installation 安装 Configuration 配置 Customize 自定义 FAQ 提问 Gallary 图片展示 License 开源许可 Introduction 介绍","text":"文档语言 中文文档 English Contents 目录 Introduction 介绍 Demo 演示 Features 特点 Installation 安装 Configuration 配置 Customize 自定义 FAQ 提问 Gallary 图片展示 License 开源许可 Introduction 介绍 优雅、功能全面、阅读友好的hexo主题。 Demo 演示 Demo site 作者的博客 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","categories":[],"tags":[]}]}