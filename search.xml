<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何加快github和stackoverflow</title>
    <url>/2020/04/20/ru-he-jia-kuai-github-he-stackoverflow/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        在工作上，我们有时候需要使用GitHub去下载代码，但因为有墙的原因，往往网页打开很慢，下载很慢。stack overflow也是如此，那么本文就解决三个问题，而网上有许多解决博客，而我本篇就只当搬运工。</p>
<ol>
<li>github打开慢</li>
<li>github下载慢</li>
<li>stack overflow打开慢</li>
</ol>
<h2 id="github打开慢"><a href="#github打开慢" class="headerlink" title="github打开慢"></a>github打开慢</h2><h3 id="https-www-jianshu-com-p-0493dcc15d6f"><a href="#https-www-jianshu-com-p-0493dcc15d6f" class="headerlink" title="https://www.jianshu.com/p/0493dcc15d6f"></a><a href="https://www.jianshu.com/p/0493dcc15d6f" target="_blank" rel="noopener">https://www.jianshu.com/p/0493dcc15d6f</a></h3><p><a href="https://github.com.ipaddress.com/" target="_blank" rel="noopener">https://github.com.ipaddress.com/</a></p>
<h2 id="github下载慢"><a href="#github下载慢" class="headerlink" title="github下载慢"></a>github下载慢</h2><p>可以用码云这个工具人，具体操作:</p>
<p><a href="https://blog.csdn.net/qing666888/article/details/79123742" target="_blank" rel="noopener">https://blog.csdn.net/qing666888/article/details/79123742</a></p>
<h2 id="stack-overflow打开慢"><a href="#stack-overflow打开慢" class="headerlink" title="stack overflow打开慢"></a>stack overflow打开慢</h2><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>stackOverflow打开慢并不是stackoverflow被墙，而是stackvoerflow用了google的api，然后国内google是用不了的，所以导致加载慢，出现样式错乱，不能注册，不能登录等等一系列问题。</p>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>参考了这篇博客：<a href="https://my.oschina.net/u/4000302/blog/3042609" target="_blank" rel="noopener">https://my.oschina.net/u/4000302/blog/3042609</a></p>
<p>在本地host文件，路径一般是：C:\Windows\System32\drivers\etc。</p>
<p>加入：一开始加入104.19.196.151  ajax.googleapis.com，打开速度快多了，后面换成127.0.0.1       ajax.googleapis.com，直接访问本地地址。</p>
<p>其他办法：下载插件，将Google CDN 替换成国内的了。具体可参考博客：<a href="https://www.cnblogs.com/sese/p/10271964.html" target="_blank" rel="noopener">https://www.cnblogs.com/sese/p/10271964.html</a></p>
<h2 id="最后附上我的host："><a href="#最后附上我的host：" class="headerlink" title="最后附上我的host："></a>最后附上我的host：</h2><pre><code>## stackoverflow
127.0.0.1       ajax.googleapis.com
# Github
#
# acclerate github.com touch speed
## github
151.101.44.249 github.global.ssl.fastly.net
192.30.255.112 github.com
199.232.28.133 assets-cdn.github.com
185.199.109.153 documentcloud.github.com
192.30.253.119 gist.github.com
185.199.110.154 help.github.com
140.82.114.10 nodeload.github.com
151.101.0.133 raw.github.com
185.199.108.153 githubstatus.com
140.82.114.17 training.github.com
199.232.28.133 raw.githubusercontent.com
199.232.28.133 gist.githubusercontent.com
199.232.28.133 cloud.githubusercontent.com
199.232.28.133 camo.githubusercontent.com
199.232.28.133 avatars0.githubusercontent.com
199.232.28.133 avatars1.githubusercontent.com
199.232.28.133 avatars2.githubusercontent.com
199.232.28.133 avatars3.githubusercontent.com
199.232.28.133 avatars4.githubusercontent.com
199.232.28.133 avatars5.githubusercontent.com
199.232.28.133 avatars6.githubusercontent.com
199.232.28.133 avatars7.githubusercontent.com
199.232.28.133 avatars8.githubusercontent.com
192.30.253.120 codeload.github.com</code></pre><script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>工作中技巧</category>
        <category>github，stack overflow</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>工作中技巧</tag>
        <tag>github，stack overflow</tag>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP详解</title>
    <url>/2020/03/16/http-xiang-jie/</url>
    <content><![CDATA[<h2 id="面试官，别问我-HTTP-了！看这-30-张图就行！"><a href="#面试官，别问我-HTTP-了！看这-30-张图就行！" class="headerlink" title="面试官，别问我 HTTP 了！看这 30 张图就行！"></a>面试官，别问我 HTTP 了！看这 30 张图就行！</h2><p>PS:以下文章来源于公众号小林coding ，作者小林coding，本人觉得不错就先收藏起来。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在面试过程中，HTTP 被提问的概率还是比较高的。</p>
<p>这里搜集了 5 大类 HTTP 面试常问的题目，同时这 5 大类题跟 <strong>HTTP 的发展和演变</strong>关联性是比较大的，通过<strong>问答 + 图解</strong>的形式<strong>由浅入深</strong>的方式帮助大家进一步的学习和理解 HTTP 协议。</p>
<p>应该说HTTP和HTTPS部分的面试题，看这些基本就够了。</p>
<ol>
<li>HTTP 基本概念</li>
<li>Get 与 Post</li>
<li>HTTP 特性</li>
<li>HTTPS 与 HTTP</li>
<li>HTTP/1.1、HTTP/2、HTTP/3 演变</li>
</ol>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUfaroic4mYY8ibHCdicAsWJibSgEbPVBNEK2aD6RK7nod68Het5BKvhq8Cw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="提纲">提纲</p>
<hr>
<h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="01-HTTP-基本概念"><a href="#01-HTTP-基本概念" class="headerlink" title="01 HTTP 基本概念"></a>01 HTTP 基本概念</h3><blockquote>
<p>HTTP 是什么？描述一下</p>
</blockquote>
<p>HTTP 是超文本传输协议，也就是<strong>H</strong>yperText <strong>T</strong>ransfer <strong>P</strong>rotocol。</p>
<blockquote>
<p>能否详细解释「超文本传输协议」？</p>
</blockquote>
<p>HTTP的名字「超文本协议传输」，它可以拆成三个部分：</p>
<ul>
<li>超文本</li>
<li>传输</li>
<li>协议</li>
</ul>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlU4cfNS4t8C0AjG8YleW3FjITV4h4aQNn1iboHhjALOGicsFsLuQAXwVaQ/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="三个部分">三个部分</p>
<p><em>1. 「协议」</em></p>
<p>在生活中，我们也能随处可见「协议」，例如：</p>
<ul>
<li>刚毕业时会签一个「三方协议」；</li>
<li>找房子时会签一个「租房协议」；</li>
</ul>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUZor6NTMkR1NwyYqut8YBYdQQgwTic0iclibo8LSlicZVSSZRoeu45zCLAw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="三方协议和租房协议">三方协议和租房协议</p>
<p>生活中的协议，本质上与计算机中的协议是相同的，协议的特点:</p>
<ul>
<li>「<strong>协</strong>」字，代表的意思是必须有<strong>两个以上的参与者</strong>。例如三方协议里的参与者有三个：你、公司、学校三个；租房协议里的参与者有两个：你和房东。</li>
<li>「<strong>仪</strong>」字，代表的意思是对参与者的一种<strong>行为约定和规范</strong>。例如三方协议里规定试用期期限、毁约金等；租房协议里规定租期期限、每月租金金额、违约如何处理等。</li>
</ul>
<p>针对 HTTP <strong>协议</strong>，我们可以这么理解。</p>
<p>HTTP 是一个用在计算机世界里的<strong>协议</strong>。它使用计算机能够理解的语言确立了一种计算机之间交流通信的规范（<strong>两个以上的参与者</strong>），以及相关的各种控制和错误处理方式（<strong>行为约定和规范</strong>）。</p>
<p><em>2. 「传输」</em></p>
<p>所谓的「传输」，很好理解，就是把一堆东西从 A 点搬到 B 点，或者从 B 点 搬到 A 点。</p>
<p>别轻视了这个简单的动作，它至少包含两项重要的信息。</p>
<p>HTTP 协议是一个<strong>双向协议</strong>。</p>
<p>我们在上网冲浪时，浏览器是请求方 A ，百度网站就是应答方 B。双方约定用 HTTP 协议来通信，于是浏览器把请求数据发送给网站，网站再把一些数据返回给浏览器，最后由浏览器渲染在屏幕，就可以看到图片、视频了。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUZzUNhbz8lJy4NPLT3iaFFU09Wg5OcrHwXLYP8a1pmaBseMLKxJd7cLw/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="请求 - 应答">请求 - 应答</p>
<p>数据虽然是在 A 和 B 之间传输，但允许中间有<strong>中转或接力</strong>。</p>
<p>就好像第一排的同学想穿递纸条给最后一排的同学，那么传递的过程中就需要经过好多个同学（中间人），这样的传输方式就从「A &lt; — &gt; B」，变成了「A &lt;-&gt; N &lt;-&gt; M &lt;-&gt; B」。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_gif/J0g14CUwaZdfFhVyCbZ3pmsIHo1tqLRvXoBp5adCLFTZoBDbkDZ5bJhJCy9pXpkcHCcrDwia4rpWuEIIhkTqkQQ/640?wx_fmt=gif&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1" alt="img"></p>
<p>而在 HTTP 里，需要中间人遵从 HTTP 协议，只要不打扰基本的数据传输，就可以添加任意额外的东西。</p>
<p>针对<strong>传输</strong>，我们可以进一步理解了 HTTP。</p>
<p>HTTP 是一个在计算机世界里专门用来在<strong>两点之间传输数据</strong>的约定和规范。</p>
<p><em>3. 「超文本」</em></p>
<p>HTTP 传输的内容是「超文本」。</p>
<p>我们先来理解「文本」，在互联网早期的时候只是简单的字符文字，但现在「文本」。的涵义已经可以扩展为图片、视频、压缩包等，在 HTTP 眼里这些都算做「文本」。</p>
<p>再来理解「超文本」，它就是<strong>超越了普通文本的文本</strong>，它是文字、图片、视频等的混合体最关键有超链接，能从一个超文本跳转到另外一个超文本。</p>
<p>HTML 就是最常见的超文本了，它本身只是纯文字文件，但内部用很多标签定义了图片、视频等的链接，在经过浏览器的解释，呈现给我们的就是一个文字、有画面的网页了。</p>
<p>OK，经过了对 HTTP 里这三个名词的详细解释，就可以给出比「超文本传输协议」这七个字更准确更有技术含量的答案：</p>
<p><strong>HTTP 是一个在计算机世界里专门在「两点」之间「传输」文字、图片、音频、视频等「超文本」数据的「约定和规范」。</strong></p>
<blockquote>
<p>那「HTTP 是用于从互联网服务器传输超文本到本地浏览器的协议HTTP」 ，这种说法正确吗？</p>
</blockquote>
<p>这种说法是<strong>不正确</strong>的。因为也可以是「服务器&lt; – &gt;服务器」，所以采用<strong>两点之间</strong>的描述会更准确。</p>
<blockquote>
<p>HTTP 常见的状态码，有哪些？</p>
</blockquote>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUfV6qkzg4yHtOibAfTv6hTicOx73F55WWl4nW2FWlXnDJ7Igd9kvrrRnA/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="五大类 HTTP 状态码">五大类 HTTP 状态码</p>
<p><em>1xx</em></p>
<p><code>1xx</code> 类状态码属于<strong>提示信息</strong>，是协议处理中的一种中间状态，实际用到的比较少。</p>
<p><em>2xx</em></p>
<p><code>2xx</code> 类状态码表示服务器<strong>成功</strong>处理了客户端的请求，也是我们最愿意看到的状态。</p>
<p>「<strong>200 OK</strong>」是最常见的成功状态码，表示一切正常。如果是非 <code>HEAD</code> 请求，服务器返回的响应头都会有 body 数据。</p>
<p>「<strong>204 No Content</strong>」也是常见的成功状态码，与 200 OK 基本相同，但响应头没有 body 数据。</p>
<p>「<strong>206 Partial Content</strong>」是应用于 HTTP 分块下载或断电续传，表示响应返回的 body 数据并不是资源的全部，而是其中的一部分，也是服务器处理成功的状态。</p>
<p><em>3xx</em></p>
<p><code>3xx</code> 类状态码表示客户端请求的资源发送了变动，需要客户端用新的 URL 重新发送请求获取资源，也就是<strong>重定向</strong>。</p>
<p>「<strong>301 Moved Permanently</strong>」表示永久重定向，说明请求的资源已经不存在了，需改用新的 URL 再次访问。</p>
<p>「<strong>302 Found</strong>」表示临时重定向，说明请求的资源还在，但暂时需要用另一个 URL 来访问。</p>
<p>301 和 302 都会在响应头里使用字段 <code>Location</code>，指明后续要跳转的 URL，浏览器会自动重定向新的 URL。</p>
<p>「<strong>304 Not Modified</strong>」不具有跳转的含义，表示资源未修改，重定向已存在的缓冲文件，也称缓存重定向，用于缓存控制。</p>
<p><em>4xx</em></p>
<p><code>4xx</code> 类状态码表示客户端发送的<strong>报文有误</strong>，服务器无法处理，也就是错误码的含义。</p>
<p>「<strong>400 Bad Request</strong>」表示客户端请求的报文有错误，但只是个笼统的错误。</p>
<p>「<strong>403 Forbidden</strong>」表示服务器禁止访问资源，并不是客户端的请求出错。</p>
<p>「<strong>404 Not Found</strong>」表示请求的资源在服务器上不存在或未找到，所以无法提供给客户端。</p>
<p><em>5xx</em></p>
<p><code>5xx</code> 类状态码表示客户端请求报文正确，但是<strong>服务器处理时内部发生了错误</strong>，属于服务器端的错误码。</p>
<p>「<strong>500 Internal Server Error</strong>」与 400 类型，是个笼统通用的错误码，服务器发生了什么错误，我们并不知道。</p>
<p>「<strong>501 Not Implemented</strong>」表示客户端请求的功能还不支持，类似“即将开业，敬请期待”的意思。</p>
<p>「<strong>502 Bad Gateway</strong>」通常是服务器作为网关或代理时返回的错误码，表示服务器自身工作正常，访问后端服务器发生了错误。</p>
<p>「<strong>503 Service Unavailable</strong>」表示服务器当前很忙，暂时无法响应服务器，类似“网络服务正忙，请稍后重试”的意思。</p>
<blockquote>
<p>http 常见字段有哪些？</p>
</blockquote>
<p><em>Host</em></p>
<p>客户端发送请求时，用来指定服务器的域名。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlU6aoJZ8ROGvuttxDGXYnKXgzDdOBXibKpZVoqhkArdZ3QvMBBDaLONkw/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>
<pre><code>Host: www.A.com</code></pre><p>有了 <code>Host</code> 字段，就可以将请求发往「同一台」服务器上的不同网站。</p>
<p><em>Content-Length 字段</em></p>
<p>服务器在返回数据时，会有 <code>Content-Length</code> 字段，表明本次回应的数据长度。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlU79Ir1qmS5DMj7XLLibaibsbUEUN5JyB2ugmEHcxwIe7JBkBHM99XQp3g/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>
<pre><code>Content-Length: 1000</code></pre><p>如上面则是告诉浏览器，本次服务器回应的数据长度是 1000 个字节，后面的字节就属于下一个回应了。</p>
<p><em>Connection 字段</em></p>
<p><code>Connection</code> 字段最常用于客户端要求服务器使用 TCP 持久连接，以便其他请求复用。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUlhrVicZt4iaLPPibcD8KQV4z9vqwAaAjdtkjUo5fGlKOsTaicbtEDO4u1Q/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="image"></p>
<p>HTTP/1.1 版本的默认连接都是持久连接，但为了兼容老版本的 HTTP，需要指定 <code>Connection</code> 首部字段的值为 <code>Keep-Alive</code>。</p>
<pre><code>Connection: keep-alive</code></pre><p>一个可以复用的 TCP 连接就建立了，直到客户端或服务器主动关闭连接。但是，这不是标准字段。</p>
<p><em>Content-Type 字段</em></p>
<p><code>Content-Type</code> 字段用于服务器回应时，告诉客户端，本次数据是什么格式。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUPPfeuboYtO6sBBQw5JI76dSrAoNlvjs2TysKiaPyVGHrtjFJiblIhfNQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>
<pre><code>Content-Type: text/html; charset=utf-8</code></pre><p>上面的类型表明，发送的是网页，而且编码是UTF-8。</p>
<p>客户端请求的时候，可以使用 <code>Accept</code> 字段声明自己可以接受哪些数据格式。</p>
<pre><code>Accept: */*</code></pre><p>上面代码中，客户端声明自己可以接受任何格式的数据。</p>
<p><em>Content-Encoding 字段</em></p>
<p><code>Content-Encoding</code> 字段说明数据的压缩方法。表示服务器返回的数据使用了什么压缩格式</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUn83Xqku5tIB6zNdHsnFH08xfURlVHdtGQiaYfF21ib3koxICwrwRnckg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>
<pre><code>Content-Encoding: gzip</code></pre><p>上面表示服务器返回的数据采用了 gzip 方式压缩，告知客户端需要用此方式解压。</p>
<p>客户端在请求时，用 <code>Accept-Encoding</code> 字段说明自己可以接受哪些压缩方法。</p>
<pre><code>Accept-Encoding: gzip, deflate</code></pre><hr>
<h3 id="GET-与-POST"><a href="#GET-与-POST" class="headerlink" title="GET 与 POST"></a>GET 与 POST</h3><blockquote>
<p>说一下 GET 和 POST 的区别？</p>
</blockquote>
<p><code>Get</code> 方法的含义是请求<strong>从服务器获取资源</strong>，这个资源可以是静态的文本、页面、图片视频等。</p>
<p>比如，你打开我的文章，浏览器就会发送 GET 请求给服务器，服务器就会返回文章的所有文字及资源。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlU3JTe0R3a3PI7B4ZGmmJbu8VG7L7GoicAvIBKCPXbrHdw9gicic50kqptQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="GET 请求">GET 请求</p>
<p>而<code>POST</code> 方法则是相反操作，它向 <code>URI</code> 指定的资源提交数据，数据就放在报文的 body 里。</p>
<p>比如，你在我文章底部，敲入了留言后点击「提交」（<strong>暗示你们留言</strong>），浏览器就会执行一次 POST 请求，把你的留言文字放进了报文 body 里，然后拼接好 POST 请求头，通过 TCP 协议发送给服务器。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUtIwC51jPmhF03FClzgibIp29fbNtLyjicic0xJqd5Lmia7cs2GHlcgXn6w/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="POST 请求">POST 请求</p>
<blockquote>
<p>GET 和 POST 方法都是安全和幂等的吗？</p>
</blockquote>
<p>先说明下安全和幂等的概念：</p>
<ul>
<li>在 HTTP 协议里，所谓的「安全」是指请求方法不会「破坏」服务器上的资源。</li>
<li>所谓的「幂等」，意思是多次执行相同的操作，结果都是「相同」的。</li>
</ul>
<p>那么很明显 <strong>GET 方法就是安全且幂等的</strong>，因为它是「只读」操作，无论操作多少次，服务器上的数据都是安全的，且每次的结果都是相同的。</p>
<p><strong>POST</strong> 因为是「新增或提交数据」的操作，会修改服务器上的资源，所以是<strong>不安全</strong>的，且多次提交数据就会创建多个资源，所以<strong>不是幂等</strong>的。</p>
<hr>
<h3 id="03-HTTP-特性"><a href="#03-HTTP-特性" class="headerlink" title="03 HTTP 特性"></a>03 HTTP 特性</h3><blockquote>
<p>你知道的 HTTP（1.1） 的优点有哪些，怎么体现的？</p>
</blockquote>
<p>HTTP 最凸出的优点是「简单、灵活和易于扩展、应用广泛和跨平台」。</p>
<p><em>1. 简单</em></p>
<p>HTTP 基本的报文格式就是 <code>header + body</code>，头部信息也是 <code>key-value</code> 简单文本的形式，<strong>易于理解</strong>，降低了学习和使用的门槛。</p>
<p><em>2. 灵活和易于扩展</em></p>
<p>HTTP协议里的各类请求方法、URI/URL、状态码、头字段等每个组成要求都没有被固定死，都允许开发人员<strong>自定义和扩充</strong>。</p>
<p>同时 HTTP 由于是工作在应用层（ <code>OSI</code> 第七层），则它<strong>下层可以随意变化</strong>。</p>
<p>HTTPS 也就是在 HTTP 与 TCP 层之间增加了 SSL/TLS 安全传输层，HTTP/3 甚至把 TCPP 层换成了基于 UDP 的 QUIC。</p>
<p><em>3. 应用广泛和跨平台</em></p>
<p>互联网发展至今，HTTP 的应用范围非常的广泛，从台式机的浏览器到手机上的各种 APP，从看新闻、刷贴吧到购物、理财、吃鸡，HTTP 的应用<strong>片地开花</strong>，同时天然具有<strong>跨平台</strong>的优越性。</p>
<blockquote>
<p>那它的缺点呢？</p>
</blockquote>
<p>HTTP 协议里有优缺点一体的<strong>双刃剑</strong>，分别是「无状态、明文传输」，同时还有一大缺点「不安全」。</p>
<p><em>1. 无状态双刃剑</em></p>
<p>无状态的<strong>好处</strong>，因为服务器不会去记忆 HTTP 的状态，所以不需要额外的资源来记录状态信息，这能减轻服务器的负担，能够把更多的 CPU 和内存用来对外提供服务。</p>
<p>无状态的<strong>坏处</strong>，既然服务器没有记忆能力，它在完成有关联性的操作时会非常麻烦。</p>
<p>例如登录-&gt;添加购物车-&gt;下单-&gt;结算-&gt;支付，这系列操作都要知道用户的身份才行。但服务器不知道这些请求是有关联的，每次都要问一遍身份信息。</p>
<p>这样每操作一次，都要验证信息，这样的购物体验还能愉快吗？别问，问就是<strong>酸爽</strong>！</p>
<p>对于无状态的问题，解法方案有很多种，其中比较简单的方式用 <strong>Cookie</strong> 技术。</p>
<p><code>Cookie</code> 通过在请求和响应报文中写入 Cookie 信息来控制客户端的状态。</p>
<p>相当于，<strong>在客户端第一次请求后，服务器会下发一个装有客户信息的「小贴纸」，后续客户端请求服务器的时候，带上「小贴纸」，服务器就能认得了了</strong>，</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUNPyKRfRoJdjCtBnMxia0ObgHaMxbPQDG4fdddhefBg8dhGeFE2Yj18A/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="Cookie 技术">Cookie 技术</p>
<p><em>2. 明文传输双刃剑</em></p>
<p>明文意味着在传输过程中的信息，是可方便阅读的，通过浏览器的 F12 控制台或 Wireshark 抓包都可以直接肉眼查看，为我们调试工作带了极大的便利性。</p>
<p>但是这正是这样，HTTP 的所有信息都暴露在了光天化日下，相当于<strong>信息裸奔</strong>。在传输的漫长的过程中，信息的内容都毫无隐私可言，很容易就能被窃取，如果里面有你的账号密码信息，那<strong>你号没了</strong>。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUrZU2TpeianDooc2OXnibKyrQfPJHLic9eQ9ibCmulc4YnTpGoGyRtXpK1g/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p>
<p><em>3. 不安全</em></p>
<p>HTTP 比较严重的缺点就是不安全：</p>
<ul>
<li>通信使用明文（不加密），内容可能会被窃听。比如，<strong>账号信息容易泄漏，那你号没了。</strong></li>
<li>不验证通信方的身份，因此有可能遭遇伪装。比如，<strong>访问假的淘宝、拼多多，那你钱没了。</strong></li>
<li>无法证明报文的完整性，所以有可能已遭篡改。比如，<strong>网页上植入垃圾广告，视觉污染，眼没了。</strong></li>
</ul>
<p>HTTP 的安全问题，可以用 HTTPS 的方式解决，也就是通过引入 SSL/TLS 层，使得在安全上达到了极致。</p>
<blockquote>
<p>那你说下 HTTP/1.1 的性能如何？</p>
</blockquote>
<p>HTTP 协议是基于 <strong>TCP/IP</strong>，并且使用了「<strong>请求 - 应答</strong>」的通信模式，所以性能的关键就在这<strong>两点</strong>里。</p>
<p><em>1. 长连接</em></p>
<p>早期 HTTP/1.0 性能上的一个很大的问题，那就是每发起一个请求，都要新建一次 TCP 连接（三次握手），而且是串行请求，做了无畏的 TCP 连接建立和断开，增加了通信开销。</p>
<p>为了解决上述 TCP 连接问题，HTTP/1.1 提出了<strong>长连接</strong>的通信方式，也叫持久连接。这种方式的好处在于减少了 TCP 连接的重复建立和断开所造成的额外开销，减轻了服务器端的负载。</p>
<p>持久连接的特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接状态。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUShM2XNfyDWNRBB3TMZrmxcmlEibkfNuIkn5Rg0KIOQMO4ARjJQphaPg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="短连接与长连接">短连接与长连接</p>
<p><em>2. 管道网络传输</em></p>
<p>HTTP/1.1 采用了长连接的方式，这使得管道（pipeline）网络传输成为了可能。</p>
<p>即可在同一个 TCP 连接里面，客户端可以发起多个请求，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以<strong>减少整体的响应时间。</strong></p>
<p>举例来说，客户端需要请求两个资源。以前的做法是，在同一个TCP连接里面，先发送 A 请求，然后等待服务器做出回应，收到后再发出 B 请求。管道机制则是允许浏览器同时发出 A 请求和 B 请求。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlU1VFq32MSkYOOuWLwoicjDbwdmWmmkiazufEY2icNrVhUzNU32o6I3gu8w/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="管道网络传输">管道网络传输</p>
<p>但是服务器还是按照<strong>顺序</strong>，先回应 A 请求，完成后再回应 B 请求。要是 前面的回应特别慢，后面就会有许多请求排队等着。这称为「队头堵塞」。</p>
<p><em>3. 队头阻塞</em></p>
<p>「请求 - 应答」的模式加剧了 HTTP 的性能问题。</p>
<p>因为当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一同被阻塞了，会招致客户端一直请求不到数据，这也就是「<strong>队头阻塞</strong>」。<strong>好比上班的路上塞车</strong>。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUcDl19EFtPvibXSLqDp1dGeIiaP0lDI4WfeCaRcoe0PbdgomJH0HTyOkg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="队头阻塞">队头阻塞</p>
<p>总之 HTTP/1.1 的性能一般般，后续的 HTTP/2 和 HTTP/3 就是在优化 HTTP 的性能。</p>
<hr>
<h3 id="04-HTTP-与-HTTPS"><a href="#04-HTTP-与-HTTPS" class="headerlink" title="04 HTTP 与 HTTPS"></a>04 HTTP 与 HTTPS</h3><blockquote>
<p>HTTP 与 HTTPS 有哪些区别？</p>
</blockquote>
<ol>
<li>HTTP 是超文本传输协议，信息是明文传输，存在安全风险的问题。HTTPS 则解决 HTTP 不安全的缺陷，在 TCP 和 HTTP 网络层之间加入了 SSL/TLS 安全协议，使得报文能够加密传输。</li>
<li>HTTP 连接建立相对简单， TCP 三次握手之后便可进行 HTTP 的报文传输。而 HTTPS 在 TCP 三次握手之后，还需进行 SSL/TLS 的握手过程，才可进入加密报文传输。</li>
<li>HTTP 的端口号是 80，HTTPS 的端口号是 443。</li>
<li>HTTPS 协议需要向 CA（证书权威机构）申请数字证书，来保证服务器的身份是可信的。</li>
</ol>
<blockquote>
<p>HTTPS 解决了 HTTP 的哪些问题？</p>
</blockquote>
<p>HTTP 由于是明文传输，所以安全上存在以下三个风险：</p>
<ul>
<li><strong>窃听风险</strong>，比如通信链路上可以获取通信内容，用户号容易没。</li>
<li><strong>篡改风险</strong>，比如强制入垃圾广告，视觉污染，用户眼容易瞎。</li>
<li><strong>冒充风险</strong>，比如冒充淘宝网站，用户钱容易没。</li>
</ul>
<p>HTTP<strong>S</strong> 在 HTTP 与 TCP 层之间加入了 <code>SSL/TLS</code> 协议。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUzdWm2toFZmoutgdMlZichgjsFggJOHXg6Z09ckSyeTPpkdywfljh3uw/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="HTTP 与 HTTPS 网络层"></p>
<p>HTTP 与 HTTPS</p>
<p>可以很好的解决了上述的风险：</p>
<ul>
<li><strong>信息加密</strong>：交互信息无法被窃取，但你的号会因为「自身忘记」账号而没。</li>
<li><strong>校验机制</strong>：无法篡改通信内容，篡改了就不能正常显示，但百度「竞价排名」依然可以搜索垃圾广告。</li>
<li><strong>身份证书</strong>：证明淘宝是真的淘宝网，但你的钱还是会因为「剁手」而没。</li>
</ul>
<p>可见，只要自身不做「恶」，SSL/TLS 协议是能保证通信是安全的。</p>
<blockquote>
<p>HTTPS 是如何解决上面的三个风险的？</p>
</blockquote>
<ul>
<li><strong>混合加密</strong>的方式实现信息的<strong>机密性</strong>，解决了窃听的风险。</li>
<li><strong>摘要算法</strong>的方式来实现<strong>完整性</strong>，它能够为数据生成独一无二的「指纹」，指纹用于校验数据的完整性，解决了篡改的风险。</li>
<li>将服务器公钥放入到<strong>数字证书</strong>中，解决了冒充的风险。</li>
</ul>
<p><em>1. 混合加密</em></p>
<p>通过<strong>混合加密</strong>的方式可以保证信息的<strong>机密性</strong>，解决了窃听的风险。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUYNGEmfY95A74GR3xicqXKZCDI7Q4icgQu7CuSSx9QiaFlr4Py49RHonjw/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="混合加密">混合加密</p>
<p>HTTPS 采用的是<strong>对称加密</strong>和<strong>非对称加密</strong>结合的「混合加密」方式：</p>
<ul>
<li>在通信建立前采用<strong>非对称加密</strong>的方式交换「会话秘钥」，后续就不再使用非对称加密。</li>
<li>在通信过程中全部使用<strong>对称加密</strong>的「会话秘钥」的方式加密明文数据。</li>
</ul>
<p>采用「混合加密」的方式的原因：</p>
<ul>
<li><strong>对称加密</strong>只使用一个密钥，运算速度快，密钥必须保密，无法做到安全的密钥交换。</li>
<li><strong>非对称加密</strong>使用两个密钥：公钥和私钥，公钥可以任意分发而私钥保密，解决了密钥交换问题但速度慢。</li>
</ul>
<p><em>2. 摘要算法</em></p>
<p><strong>摘要算法</strong>用来实现<strong>完整性</strong>，能够为数据生成独一无二的「指纹」，用于校验数据的完整性，解决了篡改的风险。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUicIliaBcr2XAXpMdeibLG4MMticpkX0e6xZHbXeiavMu7faJcL2TdVj0Udw/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="校验完整性">校验完整性</p>
<p>客户端在发送明文之前会通过摘要算法算出明文的「指纹」，发送的时候把「指纹 + 明文」一同<br>加密成密文后，发送给服务器，服务器解密后，用相同的摘要算法算出发送过来的明文，通过比较客户端携带的「指纹」和当前算出的「指纹」做比较，若「指纹」相同，说明数据是完整的。</p>
<p><em>3. 数字证书</em></p>
<p>客户端先向服务器端索要公钥，然后用公钥加密信息，服务器收到密文后，用自己的私钥解密。</p>
<p>这就存在些问题，如何保证公钥不被篡改和信任度？</p>
<p>所以这里就需要借助第三方权威机构 <code>CA</code> （数字证书认证机构），将<strong>服务器公钥放在数字证书</strong>（由数字证书认证机构颁发）中，只要证书是可信的，公钥就是可信的。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUibyiaEab7NMrTn632LZmYQe5qaibibT0xsOs7ic6u98ypWJBjbPMzOUCb2g/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="数子证书工作流程">数字证书工作流程</p>
<p>通过数字证书的方式保证服务器公钥的身份，解决冒充的风险。</p>
<blockquote>
<p>HTTPS  是如何建立连接的？其间交互了什么？</p>
</blockquote>
<p>SSL/TLS 协议基本流程：</p>
<ul>
<li>客户端向服务器索要并验证服务器的公钥。</li>
<li>双方协商生产「会话秘钥」。</li>
<li>双方采用「会话秘钥」进行加密通信。</li>
</ul>
<p>前两步也就是 SSL/TLS 的建立过程，也就是握手阶段。</p>
<p>SSL/TLS 的「握手阶段」涉及<strong>四次</strong>通信，可见下图：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUMRTqQDVOJHMZe3JoN5TqSb0uYicOqMH2qHgic7M6rtCrjPOToDjBm11A/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="HTTPS 连接建立过程">HTTPS 连接建立过程</p>
<p>SSL/TLS 协议建立的详细流程：</p>
<p><em>1. ClientHello</em></p>
<p>首先，由客户端向服务器发起加密通信请求，也就是 <code>ClientHello</code> 请求。</p>
<p>在这一步，客户端主要向服务器发送以下信息：</p>
<p>（1）客户端支持的 SSL/TLS 协议版本，如 TLS 1.2 版本。</p>
<p>（2）客户端生产的随机数（<code>Client Random</code>），后面用于生产「会话秘钥」。</p>
<p>（3）客户端支持的密码套件列表，如 RSA 加密算法。</p>
<p><em>2. SeverHello</em></p>
<p>服务器收到客户端请求后，向客户端发出响应，也就是 <code>SeverHello</code>。服务器回应的内容有如下内容：</p>
<p>（1）确认 SSL/ TLS 协议版本，如果浏览器不支持，则关闭加密通信。</p>
<p>（2）服务器生产的随机数（<code>Server Random</code>），后面用于生产「会话秘钥」。</p>
<p>（3）确认的密码套件列表，如 RSA 加密算法。</p>
<p>（4）服务器的数字证书。</p>
<p><em>3.客户端回应</em></p>
<p>客户端收到服务器的回应之后，首先通过浏览器或者操作系统中的 CA 公钥，确认服务器的数字证书的真实性。</p>
<p>如果证书没有问题，客户端会从数字证书中取出服务器的公钥，然后使用它加密报文，向服务器发送如下信息：</p>
<p>（1）一个随机数（<code>pre-master key</code>）。该随机数会被服务器公钥加密。</p>
<p>（2）加密通信算法改变通知，表示随后的信息都将用「会话秘钥」加密通信。</p>
<p>（3）客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供服务端校验。</p>
<p>上面第一项的随机数是整个握手阶段的第三个随机数，这样服务器和客户端就同时有三个随机数，接着就用双方协商的加密算法，<strong>各自生成</strong>本次通信的「会话秘钥」。</p>
<p><em>4. 服务器的最后回应</em></p>
<p>服务器收到客户端的第三个随机数（<code>pre-master key</code>）之后，通过协商的加密算法，计算出本次通信的「会话秘钥」。然后，向客户端发生最后的信息：</p>
<p>（1）加密通信算法改变通知，表示随后的信息都将用「会话秘钥」加密通信。</p>
<p>（2）服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时把之前所有内容的发生的数据做个摘要，用来供客户端校验。</p>
<p>至此，整个 SSL/TLS 的握手阶段全部结束。接下来，客户端与服务器进入加密通信，就完全是使用普通的 HTTP 协议，只不过用「会话秘钥」加密内容。</p>
<hr>
<h3 id="05-HTTP-1-1、HTTP-2、HTTP-3-演变"><a href="#05-HTTP-1-1、HTTP-2、HTTP-3-演变" class="headerlink" title="05 HTTP/1.1、HTTP/2、HTTP/3 演变"></a>05 HTTP/1.1、HTTP/2、HTTP/3 演变</h3><blockquote>
<p>说说 HTTP/1.1 相比 HTTP/1.0 提高了什么性能？</p>
</blockquote>
<p>HTTP/1.1 相比 HTTP/1.0 性能上的改进：</p>
<ul>
<li>使用 TCP 长连接的方式改善了 HTTP/1.0 短连接造成的性能开销。</li>
<li>支持 管道（pipeline）网络传输，只要第一个请求发出去了，不必等其回来，就可以发第二个请求出去，可以减少整体的响应时间。</li>
</ul>
<p>但 HTTP/1.1 还是有性能瓶颈：</p>
<ul>
<li>请求 / 响应头部（Header）未经压缩就发送，首部信息越多延迟越大。只能压缩 <code>Body</code> 的部分；</li>
<li>发送冗长的首部。每次互相发送相同的首部造成的浪费较多；</li>
<li>服务器是按请求的顺序响应的，如果服务器响应慢，会招致客户端一直请求不到数据，也就是队头阻塞；</li>
<li>没有请求优先级控制；</li>
<li>请求只能从客户端开始，服务器只能被动响应。</li>
</ul>
<blockquote>
<p>那上面的 HTTP/1.1 的性能瓶颈，HTTP/2 做了什么优化？</p>
</blockquote>
<p>HTTP/2 协议是基于 HTTPS 的，所以 HTTP/2 的安全性也是有保障的。</p>
<p>那 HTTP/2 相比 HTTP/1.1 性能上的改进：</p>
<p><em>1. 头部压缩</em></p>
<p>HTTP/2 会<strong>压缩头</strong>（Header）如果你同时发出多个请求，他们的头是一样的或是相似的，那么，协议会帮你<strong>消除重复的分</strong>。</p>
<p>这就是所谓的 <code>HPACK</code> 算法：在客户端和服务器同时维护一张头信息表，所有字段都会存入这个表，生成一个索引号，以后就不发送同样字段了，只发送索引号，这样就<strong>提高速度</strong>了。</p>
<p><em>2. 二进制格式</em></p>
<p>HTTP/2 不再像 HTTP/1.1 里的纯文本形式的报文，而是全面采用了<strong>二进制格式。</strong></p>
<p>头信息和数据体都是二进制，并且统称为帧（frame）：<strong>头信息帧和数据帧</strong>。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUahoiazC1GOBz9ICKnAd4f1PesMoT4wK4RiciaSO8e4jVakTIKfvgYCdpg/640?wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="报文区别">报文区别</p>
<p>这样虽然对人不友好，但是对计算机非常友好，因为计算机只懂二进制，那么收到报文后，无需再将明文的报文转成二进制，而是直接解析二进制报文，这<strong>增加了数据传输的效率</strong>。</p>
<p><em>3. 数据流</em></p>
<p>HTTP/2 的数据包不是按顺序发送的，同一个连接里面连续的数据包，可能属于不同的回应。因此，必须要对数据包做标记，指出它属于哪个回应。</p>
<p>每个请求或回应的所有数据包，称为一个数据流（<code>Stream</code>）。</p>
<p>每个数据流都标记着一个独一无二的编号，其中规定客户端发出的数据流编号为奇数， 服务器发出的数据流编号为偶数</p>
<p>客户端还可以<strong>指定数据流的优先级</strong>。优先级高的请求，服务器就先响应该请求。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUicf9XsgyOGDvTA9SsOicIz8t3pSibrAHTN6TW83WCmZsSeDqtZibJnoRHg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="HTT/1 ~ HTTP/2">HTT/1 ~ HTTP/2</p>
<p><em>4. 多路复用</em></p>
<p>HTTP/2 是可以在<strong>一个连接中并发多个请求或回应，而不用按照顺序一一对应</strong>。</p>
<p>移除了 HTTP/1.1 中的串行请求，不需要排队等待，也就不会再出现「队头阻塞」问题，<strong>降低了延迟，大幅度提高了连接的利用率</strong>。</p>
<p>举例来说，在一个 TCP 连接里，服务器收到了客户端 A 和 B 的两个请求，如果发现 A 处理过程非常耗时，于是就回应 A 请求已经处理好的部分，接着回应 B 请求，完成后，再回应 A 请求剩下的部分。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUZraxmGoMaxYbmqYhVW3Plx9mKM1RllEVibUysw2PCPmiaRd6H2nDuYWg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="多路复用">多路复用</p>
<p><em>5. 服务器推送</em></p>
<p>HTTP/2 还在一定程度上改善了传统的「请求 - 应答」工作模式，服务不再是被动地响应，也可以<strong>主动</strong>向客户端发送消息。</p>
<p>举例来说，在浏览器刚请求 HTML 的时候，就提前把可能会用到的 JS、CSS 文件等静态资源主动发给客户端，<strong>减少延时的等待</strong>，也就是服务器推送（Server Push，也叫 Cache Push）。</p>
<blockquote>
<p>HTTP/2 有哪些缺陷？HTTP/3 做了哪些优化？</p>
</blockquote>
<p>HTTP/2 主要的问题在于：多个 HTTP 请求在复用一个 TCP 连接，下层的 TCP 协议是不知道有多少个 HTTP 请求的。</p>
<p>所以一旦发生了丢包现象，就会触发 TCP 的重传机制，这样在一个 TCP 连接中的<strong>所有的 HTTP 请求都必须等待这个丢了的包被重传回来</strong>。</p>
<ul>
<li>HTTP/1.1 中的管道（ pipeline）传输中如果有一个请求阻塞了，那么队列后请求也统统被阻塞住了</li>
<li>HTTP/2 多请求复用一个TCP连接，一旦发生丢包，就会阻塞住所有的 HTTP 请求。</li>
</ul>
<p>这都是基于 TCP 传输层的问题，所以 <strong>HTTP/3 把 HTTP 下层的 TCP 协议改成了 UDP！</strong></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUy5OSaaTftjD7JmdU4AUMnlrGOWXnMYss5sCxMMTPUibLeHIgdsdkklQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="HTTP/1 ~ HTTP/3">HTTP/1 ~ HTTP/3</p>
<p>UDP 发生是不管顺序，也不管丢包的，所以不会出现 HTTP/1.1 的队头阻塞 和 HTTP/2 的一个丢包全部重传问题。</p>
<p>大家都知道 UDP 是不可靠传输的，但基于 UDP 的 <strong>QUIC 协议</strong> 可以实现类似 TCP 的可靠性传输。</p>
<ul>
<li>QUIC 有自己的一套机制可以保证传输的可靠性的。当某个流发生丢包时，只会阻塞这个流，<strong>其他流不会受到影响</strong>。</li>
<li>TL3 升级成了最新的 <code>1.3</code> 版本，头部压缩算法也升级成了 <code>QPack</code>。</li>
<li>HTTPS 要建立一个连接，要花费 6 次交互，先是建立三次握手，然后是 <code>TLS/1.3</code> 的三次握手。QUIC 直接把以往的 TCP 和 <code>TLS/1.3</code> 的 6 次交互<strong>合并成了 3 次，减少了交互次数</strong>。</li>
</ul>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/J0g14CUwaZfXG1113Sjm0iaOXfoOv0tlUyP3HNicKS2J21mHQD9EepOiciakC8nRkrX9C3I0hjC6Fhjvd4nLiakuLeg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="TCP HTTPS（TLS/1.3） 和 QUIC HTTPS">TCP HTTPS（TLS/1.3） 和 QUIC HTTPS</p>
<p>所以， QUIC 是一个在 UDP 之上的<strong>伪</strong> TCP + TLS + HTTP/2 的多路复用的协议。</p>
<p>QUIC 是新协议，对于很多网络设备，根本不知道什么是 QUIC，只会当做 UDP，这样会出现新的问题。所以 HTTP/3 现在普及的进度非常的缓慢，不知道未来 UDP 是否能够逆袭 TCP。</p>
<hr>
<h6 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献:"></a>参考文献:</h6><p>[1] 上野 宣.图解HTTP.人民邮电出版社.</p>
<p>[2] 罗剑锋.透视HTTP协议.极客时间.</p>
<p>[3] 陈皓.HTTP的前世今.酷壳CoolShell.</p>
<p><a href="https://coolshell.cn/articles/19840.html" target="_blank" rel="noopener">https://coolshell.cn/articles/19840.html</a></p>
<p>[4] 阮一峰.HTTP 协议入门.阮一峰的网络日志.</p>
<p><a href="http://www.ruanyifeng.com/blog/2016/08/http.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2016/08/http.html</a></p>
<p><strong>END</strong></p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>oracle</category>
        <category>别人的优秀博客文章</category>
        <category>转载</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>别人的优秀博客文章</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>oracle向mysql改造</title>
    <url>/2020/01/10/oracle-xiang-mysql-gai-zao/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​        由于工作需要，把oracle数据库改造成mysql数据库，而oracle和mysql在一定程度上有很大的区别，我们的工作是在已有项目改bug，所以特地总结一下这几天项目需要的改动。</p>
<a id="more"></a>

<h2 id="函数式报错"><a href="#函数式报错" class="headerlink" title="函数式报错"></a>函数式报错</h2><h3 id="start-with-connect-by-prior函数错误"><a href="#start-with-connect-by-prior函数错误" class="headerlink" title="start with connect by prior函数错误"></a>start with connect by prior函数错误</h3><h4 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h4><p>​        这个是oracle特有的一个函数，是根据条件递归查询”树”。注意递归查询，常用用法：start with connect by prior parentId=id或start with connect by prior id=parentId，第一种是：查询结果自己所有的后代节点（包括自己）；第二种用法是查询结果自己所有的父类节点（包括自己）。</p>
<h4 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h4><p>​        Mysql不支持通过start with connect by进行递归查询，所以创建函数进行查找。</p>
<p>​        首先是第一种：查询结果自己所有的后代节点（包括自己），首先得了解find_in_set这个函数作用，举个例子：find_in_set（parent_id,”1,2,3”）的意思是parent_id在1,2,3内。创建函数如下：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> getTaskObject    <span class="token comment" spellcheck="true">--getTaskObject 函数名称</span>
<span class="token punctuation">(</span>rootId <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">--输入值类型        </span>
<span class="token keyword">returns</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">--返回值类型</span>
<span class="token keyword">as</span>
    <span class="token keyword">begin</span>
        <span class="token keyword">DECLARE</span> sTemp <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">--定义变量</span>
        <span class="token keyword">DECLARE</span> sTempChd <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--定义变量</span>

        <span class="token keyword">SET</span> sTemp <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">-- SET sTempChd = CAST(auth_id AS CHAR);</span>
        <span class="token keyword">SET</span> sTempChd <span class="token operator">=</span> auth_id<span class="token punctuation">;</span>

        <span class="token keyword">WHILE</span> sTempChd <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DO</span> <span class="token comment" spellcheck="true">--如果不空一直循环</span>
            <span class="token keyword">IF</span> sTemp <span class="token operator">=</span> <span class="token string">''</span> <span class="token keyword">THEN</span>
                <span class="token keyword">SET</span> sTemp <span class="token operator">=</span> sTempChd<span class="token punctuation">;</span>
            <span class="token keyword">ELSE</span>
                <span class="token keyword">SET</span> sTemp<span class="token operator">=</span> CONCAT<span class="token punctuation">(</span>sTemp<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span>sTempChd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
            <span class="token keyword">SELECT</span> GROUP_CONCAT<span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">INTO</span> sTempChd <span class="token keyword">FROM</span> SBP_AUTH_ROLE <span class="token keyword">WHERE</span> FIND_IN_SET<span class="token punctuation">(</span>parent_id<span class="token punctuation">,</span>sTempChd<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--把所有的id拼接接起来</span>
        <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--结束循环</span>
        <span class="token keyword">RETURN</span> sTemp<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--返回结果</span>
<span class="token keyword">end</span></code></pre>
<p>​        调用可以向平时调用内置函数一样调用，这个函数的返回值是所有符合条件id拼接起来字符串，所以我们调用也得加find_in_set(id,getTaskObject(值))</p>
<p>​         第二种：查询结果自己所有的父类节点，返回值也是所有符合条件id拼接起来字符串，所以我们调用也得加find_in_set(id,getTaskObject(子节点id))</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> getTaskObject    <span class="token comment" spellcheck="true">--getTaskObject 函数名称</span>
<span class="token punctuation">(</span>rootId <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">--输入值类型        </span>
<span class="token keyword">returns</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">--返回值类型</span>
<span class="token keyword">as</span>
    <span class="token keyword">BEGIN</span> 
        <span class="token keyword">DECLARE</span> sTemp <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--定义变量</span>
        <span class="token keyword">DECLARE</span> sTempChd <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--定义变量</span>
        <span class="token keyword">DECLARE</span> allData <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--定义变量</span>
        <span class="token keyword">SET</span> allData<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>                
        <span class="token keyword">SET</span> sTempChd <span class="token operator">=</span>cast<span class="token punctuation">(</span>rootId <span class="token keyword">as</span> CHAR<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">SET</span> sTemp<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>
        <span class="token keyword">WHILE</span> sTempChd <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DO</span> <span class="token comment" spellcheck="true">--如果不空一直循环</span>
                <span class="token keyword">SET</span> sTemp<span class="token operator">=</span>sTempChd<span class="token punctuation">;</span>
                <span class="token keyword">SET</span> allData<span class="token operator">=</span>CONCAT<span class="token punctuation">(</span>allData<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span>sTempChd<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">SELECT</span> PARENT_ID <span class="token keyword">INTO</span> sTempChd <span class="token keyword">FROM</span> usbp_task_object <span class="token keyword">where</span> OBJECT_ID<span class="token operator">=</span>sTemp<span class="token punctuation">;</span>
        <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">--结束循环</span>
        <span class="token keyword">RETURN</span> allData<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">--返回结果</span>
    <span class="token keyword">END</span></code></pre>
<h4 id="延伸："><a href="#延伸：" class="headerlink" title="延伸："></a>延伸：</h4><h5 id="传入的table为动态table表怎么办？"><a href="#传入的table为动态table表怎么办？" class="headerlink" title="传入的table为动态table表怎么办？"></a>传入的table为动态table表怎么办？</h5><p>​        本以为这样写就可以全部用上，但这个有个明显的不足就是table只能写死，一开始的想法是把table传进去，但报错了，我是这样写的：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> parent_id <span class="token keyword">into</span> sTempChd <span class="token keyword">from</span> tableName<span class="token punctuation">(</span>ps：这是个变量<span class="token punctuation">)</span> <span class="token keyword">where</span> object_id<span class="token operator">=</span>sTemp<span class="token punctuation">;</span></code></pre>
<p>​        会报tableName这个表不存在的错误，因为sql不会自动识别tableName这个变量，它会认为有这个tableName的表 。</p>
<p>​         网上查找了资料说可以用动态sql，但函数不支持动态sql，所以解决办法就是写一个存储过程，以下讲解的是第二种查询结果自己所有的父类节点，如下:</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> SELECT_TREE<span class="token punctuation">(</span><span class="token operator">IN</span> keyColumn <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">CHARSET</span> utf8<span class="token punctuation">,</span><span class="token operator">IN</span> tableName <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">CHARSET</span> utf8<span class="token punctuation">,</span><span class="token operator">IN</span> parentColumn <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token keyword">CHARSET</span> utf8<span class="token punctuation">,</span>
<span class="token operator">IN</span> keyValue <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">CHARSET</span> utf8<span class="token punctuation">,</span><span class="token keyword">OUT</span> returndata <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span> <span class="token keyword">CHARSET</span> utf8<span class="token punctuation">)</span><span class="token comment" spellcheck="true">--输入输出参数，in为输入，out为输出</span>
    <span class="token keyword">BEGIN</span>
            <span class="token keyword">declare</span> sTemp <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--定义变量</span>
            <span class="token keyword">SET</span> sTemp <span class="token operator">=</span> keyValue<span class="token punctuation">;</span>
            <span class="token keyword">SET</span> returndata<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>

            <span class="token keyword">WHILE</span> sTemp <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DO</span><span class="token comment" spellcheck="true">--如果不空一直循环</span>
                    <span class="token comment" spellcheck="true">-- 创建sql</span>
                    <span class="token keyword">SET</span> <span class="token variable">@selectSql</span> <span class="token operator">=</span> CONCAT<span class="token punctuation">(</span><span class="token string">'select '</span><span class="token punctuation">,</span>parentColumn<span class="token punctuation">,</span><span class="token string">' INTO @recordcount  from '</span><span class="token punctuation">,</span>tableName<span class="token punctuation">,</span><span class="token string">' where '</span><span class="token punctuation">,</span>keyColumn<span class="token punctuation">,</span><span class="token string">"='"</span><span class="token punctuation">,</span>sTemp<span class="token punctuation">,</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment" spellcheck="true">-- 执行动态生成的sql语句</span>
                    PREPARE <span class="token keyword">temp</span> <span class="token keyword">FROM</span> <span class="token variable">@selectSql</span><span class="token punctuation">;</span>
                    <span class="token keyword">EXECUTE</span> <span class="token keyword">temp</span><span class="token punctuation">;</span>
                    <span class="token keyword">SET</span> sTemp <span class="token operator">=</span> <span class="token variable">@recordcount</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--其实对比上面仔细看可以看出只是这一步不同</span>
                    <span class="token keyword">IF</span> sTemp <span class="token operator">IS</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">THEN</span>
                    <span class="token keyword">SET</span> returndata<span class="token operator">=</span>CONCAT<span class="token punctuation">(</span>returndata<span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span>sTemp<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>
            <span class="token keyword">END</span> <span class="token keyword">WHILE</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">--结束循环</span>
    <span class="token keyword">END</span></code></pre>
<p>​        可以对比上面的自定义函数，一个注意地方是@recordcount 代替sTempChd 变量，声明这是个变量，其他是语法问题，逻辑和自定义函数相同。</p>
<p>​         然后就是调用测试，我是在Navicat测试的，我的版本可以直接传参（听说低版本不可以直接测试）。注意的是out输出参数要传递变量，如:(keycolum,tableName,pid,in,@returnData)。</p>
<p>​         <img src="/2020/01/10/oracle-xiang-mysql-gai-zao/%E6%B5%8B%E8%AF%95%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.png" alt="测试存储过程"></p>
<p>​         以上是在Navicat调用的，在项目中，我们需要写sql调用，用的是mybatis框架，调用如下，最重要是要加上statementType=”CALLABLE”，如果传入是map，returnData这个名字可以随便取，传入是pojo，这个值必须固定，在pojo里面应该有个同名变量。返回值去传入的参数里拿，这个我传入的是map，所以直接去传入的map拿了，至于传入pojo要给个变量returnData，会自动注入。</p>
<p>​         </p>
<pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.shd.biz.Tree.service.impl.TreeServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token comment" spellcheck="true">&lt;!-- 注意 statementType="CALLABLE" --></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>treeParent<span class="token punctuation">"</span></span> <span class="token attr-name">statementType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CALLABLE<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        {call SELECT_TREE(
        #{keyColumn,mode=IN},#{tableName,mode=IN},#{parentColumn,mode=IN},#{keyValue,mode=IN}
        ,#{returnData,mode=OUT,jdbcType=VARCHAR})}
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre>
<p>​      </p>
<pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> parameters<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        parameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"keyValue"</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        parameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"tableName"</span><span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">;</span>
        parameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"keyColumn"</span><span class="token punctuation">,</span> keyColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        parameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"parentColumn"</span><span class="token punctuation">,</span> parentColumn<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">queryForDataSet</span><span class="token punctuation">(</span>SQL_PRIFIX <span class="token operator">+</span> <span class="token string">"treeParent"</span><span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment" spellcheck="true">//结果是从传入参数里面拿，不是从返回结果拿</span>
        String returnData <span class="token operator">=</span> parameters<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"returnData"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h5 id="调用报方法read-Only错误"><a href="#调用报方法read-Only错误" class="headerlink" title="调用报方法read-Only错误"></a>调用报方法read-Only错误</h5><p>​         最后还有个报错是事务报错，是因为我项目get开头的方法设置了readOnly=”true”，而调用存储过程如果还设置readOnly属性就会报错，要加上@Transactional(readOnly = false)或改变service方法名。</p>
<h3 id="Sysdate报错"><a href="#Sysdate报错" class="headerlink" title="Sysdate报错"></a>Sysdate报错</h3><p>​        解决Sysdate替换为sysdate()</p>
<h3 id="to-char报错"><a href="#to-char报错" class="headerlink" title="to_char报错"></a>to_char报错</h3><p>​        网上查找的资料：</p>
<p>​       date_format(date,’%Y-%m-%d’) ————–&gt;oracle中的to_char();</p>
<p>​        str_to_date(date,’%Y-%m-%d’) ————–&gt;oracle中的to_date();</p>
<p>​       </p>
<h3 id="日期的计算"><a href="#日期的计算" class="headerlink" title="日期的计算"></a>日期的计算</h3><p>​        oracle 可以直接用sysdate加减乘除，而mysql不可以，如</p>
<p>近一个月：</p>
<p>​        Oracle——–&gt;sysdate-29</p>
<p>​        Mysql———&gt;</p>
<pre class=" language-sql"><code class="language-sql"><span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"REPORT_TIME == '本周'"</span><span class="token operator">></span>
                <span class="token operator">and</span> YEARWEEK<span class="token punctuation">(</span>date_format<span class="token punctuation">(</span>report_time<span class="token punctuation">,</span><span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> YEARWEEK<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"REPORT_TIME == '本月'"</span><span class="token operator">></span>
                <span class="token operator">and</span> report_time <span class="token operator">>=</span>DATE_ADD<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>interval <span class="token operator">-</span>day<span class="token punctuation">(</span>curdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span> day<span class="token punctuation">)</span> <span class="token operator">and</span> report_time <span class="token operator">&amp;</span>lt<span class="token punctuation">;</span><span class="token operator">=</span> last_day<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"REPORT_TIME == '近1个月'"</span><span class="token operator">></span>
                <span class="token operator">and</span> report_time <span class="token operator">BETWEEN</span> date_sub<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>interval <span class="token number">1</span> month<span class="token punctuation">)</span> <span class="token operator">AND</span> SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"REPORT_TIME == '近3个月'"</span><span class="token operator">></span>
                <span class="token operator">and</span> report_time <span class="token operator">BETWEEN</span> date_sub<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>interval <span class="token number">3</span> month<span class="token punctuation">)</span> <span class="token operator">AND</span> SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span>
            <span class="token operator">&lt;</span><span class="token keyword">if</span> test<span class="token operator">=</span><span class="token string">"REPORT_TIME == '近1年'"</span><span class="token operator">></span>
                <span class="token operator">and</span> report_time <span class="token operator">BETWEEN</span> date_sub<span class="token punctuation">(</span>SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>interval <span class="token number">12</span> month<span class="token punctuation">)</span> <span class="token operator">AND</span> SYSDATE<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token operator">></span></code></pre>
<h3 id="Rownum报错"><a href="#Rownum报错" class="headerlink" title="Rownum报错"></a>Rownum报错</h3><p>​        在mysql中没有Rownum，所以要特殊的实现方法，实现和效果如下，但我项目是用来分页，所以直接就用limit。</p>
<p>​         </p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token variable">@rownum</span>:<span class="token operator">=</span><span class="token variable">@rownum</span><span class="token operator">+</span><span class="token number">1</span> <span class="token keyword">AS</span> rownum<span class="token punctuation">,</span> <span class="token keyword">table</span> <span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">FROM</span> <span class="token punctuation">(</span><span class="token keyword">SELECT</span> <span class="token variable">@rownum</span>:<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> r<span class="token punctuation">,</span> <span class="token keyword">table</span> <span class="token punctuation">;</span></code></pre>
<h3 id="运算符报错"><a href="#运算符报错" class="headerlink" title="||运算符报错"></a>||运算符报错</h3><p>​        Mysql中||表示或的意识，而Oracle中||运算符可以将两个或两个以上的字符串连接在一起，在mysql中用concat代替。</p>
<h2 id="其他报错"><a href="#其他报错" class="headerlink" title="其他报错"></a>其他报错</h2><h3 id="表别名报错"><a href="#表别名报错" class="headerlink" title="表别名报错"></a>表别名报错</h3><p> 别名报错，首先mysql不可以像Oracle一样直接多重查找不加别名，如：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">Select</span> <span class="token keyword">key</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">key</span> <span class="token keyword">from</span> <span class="token keyword">database</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

改为<span class="token keyword">Select</span> t<span class="token punctuation">.</span><span class="token keyword">key</span> <span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">key</span> <span class="token keyword">from</span> <span class="token keyword">database</span><span class="token punctuation">)</span> t<span class="token punctuation">;</span></code></pre>
<p>但在删除时又不可以加别名，如 ：</p>
<pre class=" language-sql"><code class="language-sql"><span class="token keyword">Delete</span> <span class="token keyword">from</span> <span class="token keyword">database</span> r <span class="token keyword">where</span> r<span class="token punctuation">.</span>id<span class="token operator">=</span>?会报错，得改为:

<span class="token keyword">Delete</span> <span class="token keyword">from</span> <span class="token keyword">database</span> <span class="token keyword">where</span> id<span class="token operator">=</span>?</code></pre>
<h3 id="Mysql没有序列问题"><a href="#Mysql没有序列问题" class="headerlink" title="Mysql没有序列问题"></a>Mysql没有序列问题</h3><h3 id="存储类型bigInteger装换toBigDecimal"><a href="#存储类型bigInteger装换toBigDecimal" class="headerlink" title="存储类型bigInteger装换toBigDecimal"></a>存储类型bigInteger装换toBigDecimal</h3><p>​             原来oracle存储数据类型是integer，现在存储类型为decimal，启动时报错，bigInteger cannot to cast toBigDecimal，所以，就得装换一下。</p>
<p><a href="https://www.cnblogs.com/diandianquanquan/p/10852620.html" target="_blank" rel="noopener">这是详情</a></p>
<h3 id="union报错"><a href="#union报错" class="headerlink" title="union报错"></a>union报错</h3><p>​        Oracle的union和mysql的union的一个细节错误导致，oracle可以用括号括起来，而mysql不可以</p>
<script>
        document.querySelectorAll('.github-emoji')
          .forEach(el => {
            if (!el.dataset.src) { return; }
            const img = document.createElement('img');
            img.style = 'display:none !important;';
            img.src = el.dataset.src;
            img.addEventListener('error', () => {
              img.remove();
              el.style.color = 'inherit';
              el.style.backgroundImage = 'none';
              el.style.background = 'none';
            });
            img.addEventListener('load', () => {
              img.remove();
            });
            document.body.appendChild(img);
          });
      </script>]]></content>
      <categories>
        <category>oracle</category>
        <category>mysql</category>
        <category>原创</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>oracle</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
</search>
